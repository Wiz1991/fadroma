/// The `message!` and `messages!` macros depend on derive macros from serde and schemars.
/// This complicates the reexport via fadroma core due to how procedural macros resolve crates
/// (see https://github.com/serde-rs/serde/issues/1465#issuecomment-458420543)
///
/// The workaround at https://github.com/serde-rs/serde/issues/1465#issuecomment-800686252
/// is automatically implemented in the `mod msg` generated by the `contract!` macro
/// This is done automatically in the `mod msg` defined by the `contract!` macro. However if
/// you use the message macros manually, it is up to you to implement a corresponding workaround.

/// Define an enum that implements the necessary traits
/// (de/serialization, schema generation, cloning, debug printing, equality comparison)
#[macro_export] macro_rules! message {
    ( $Msg:ident { $( $(#[$meta:meta])* $field:ident : $type:ty ),* } ) => {
        #[derive(Clone,Debug,PartialEq,serde::Serialize,serde::Deserialize,schemars::JsonSchema)]
        #[serde(rename_all="snake_case")]
        pub struct $Msg { $( $(#[$meta])* pub $field: $type ),* } } }

/// Define an enum with variants that implement the necessary traits
#[macro_export] macro_rules! messages {
    ( $( $Enum:ident {
        $( $(#[$meta:meta])* $Msg:ident { $(
            $(#[$field_meta:meta])* 
            $field:ident : $type:ty
        ),* } )*
    } )*
    ) => { $(
        #[derive(Clone,Debug,PartialEq,serde::Serialize,serde::Deserialize,schemars::JsonSchema)]
        #[serde(rename_all="snake_case")]
        pub enum $Enum { $(
            $(#[$meta])* $Msg { $(
                $(#[$field_meta])*
                $field : $type
            ),* }
        ),* } )*
    }
}
